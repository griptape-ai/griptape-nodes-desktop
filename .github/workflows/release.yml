name: Release

on:
  workflow_dispatch:
    inputs:
      channel:
        description: 'Release channel (stable, beta, dev, etc.) - defaults to branch name'
        required: false
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
      channel: ${{ steps.check.outputs.channel }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Check for existing release
        id: check
        shell: bash
        run: |
          # Determine channel from input or branch name
          CURRENT_BRANCH="${{ github.ref_name }}"

          if [[ -n "${{ inputs.channel }}" ]]; then
            CHANNEL="${{ inputs.channel }}"
          elif [[ "$CURRENT_BRANCH" == "main" ]]; then
            CHANNEL="stable"
          else
            # Sanitize branch name for use as channel (replace / with -)
            CHANNEL=$(echo "$CURRENT_BRANCH" | sed 's/\//-/g')
          fi

          echo "Current branch: $CURRENT_BRANCH"
          echo "Channel: $CHANNEL"

          # Set outputs
          echo "channel=$CHANNEL" >> $GITHUB_OUTPUT

          # Create tag name
          VERSION=$(jq -r '.version' package.json)
          if [[ "$CHANNEL" == "stable" ]]; then
            tag_name="v${VERSION}"
          else
            tag_name="v${VERSION}-${CHANNEL}"
          fi

          echo "Checking for existing tag: $tag_name"

          # Check if tag already exists
          if git tag -l | grep -q "^${tag_name}$"; then
            echo "Error: Tag $tag_name already exists"
            exit 1
          fi

          # Check if GitHub release already exists
          if gh release view "$tag_name" &>/dev/null; then
            echo "Error: Release $tag_name already exists on GitHub"
            exit 1
          fi

          echo "Tag $tag_name is available"
          echo "should_proceed=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: validate
    runs-on: ${{ matrix.os }}

    permissions:
      id-token: write  # required for OIDC
      contents: write  # Required to create new releases with GITHUB_TOKEN

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Configure AWS creds via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246367841364:role/GriptapeNodesDesktopGithubActions
          aws-region: us-west-2
          role-session-name: gha-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install Apple certificates and notary profile
        if: runner.os == 'macOS' && env.MAC_CERTS_P12 != ''
        env:
          MAC_CERTS_P12: ${{ secrets.MAC_CERTS_P12 }}
          MAC_CERTS_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # create variables for file paths
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$MAC_CERTS_P12" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$MAC_CERTS_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$MAC_CERTS_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MAC_CERTS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$MAC_CERTS_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # create notarytool profile
          xcrun notarytool store-credentials --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" velopack-profile

      - name: Build with Velopack
        run: |
          CHANNEL="${{ needs.validate.outputs.channel }}"
          if [ "$RUNNER_OS" == "Linux" ]; then
            ./scripts/build-linux.sh "$CHANNEL"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ./scripts/build-osx.sh "$CHANNEL"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            powershell -ExecutionPolicy Bypass -File ./scripts/build-windows.ps1 -Channel "$CHANNEL"
          fi
        shell: bash
        env:
          MAC_CERTS_P12: ${{ secrets.MAC_CERTS_P12 }}

      - name: Publish to S3
        run: |
          CHANNEL="${{ needs.validate.outputs.channel }}"
          if [ "$RUNNER_OS" == "Linux" ]; then
            ./scripts/publish-linux.sh "$CHANNEL"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ./scripts/publish-osx.sh "$CHANNEL"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            powershell -ExecutionPolicy Bypass -File ./scripts/publish-windows.ps1 -Channel "$CHANNEL"
          fi
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clean up keychain
        if: runner.os == 'macOS' && always()
        run: security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      - name: Upload GitHub Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: releases-${{ runner.os }}-${{ runner.arch }}
          path: releases/
