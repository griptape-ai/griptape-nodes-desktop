name: Release

on:
  workflow_dispatch:
    inputs:
      tag_prefix:
        description: 'Tag prefix (e.g., "beta1", "rc1", "test") - defaults to "v"'
        required: false
        type: string
        default: v
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: true
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: true

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Check for existing release
        id: check
        shell: bash
        run: |
          # Validate release configuration
          if [[ "${{ inputs.tag_prefix }}" != "v" && "${{ inputs.draft }}" != "true" && "${{ inputs.prerelease }}" != "true" ]]; then
            echo "Error: Non-production releases (tag_prefix != 'v') must be either draft or prerelease"
            exit 1
          fi

          if [[ "${{ inputs.tag_prefix }}" == "v" && ("${{ inputs.draft }}" == "true" || "${{ inputs.prerelease }}" == "true") ]]; then
            echo "Error: Production releases (tag_prefix = 'v') cannot be marked as draft or prerelease"
            exit 1
          fi

          tag_name="${{ inputs.tag_prefix }}$(jq -r '.version' package.json)"
          echo "Checking for existing tag: $tag_name"

          # Check if tag already exists
          if git tag -l | grep -q "^${tag_name}$"; then
            echo "Error: Tag $tag_name already exists"
            exit 1
          fi

          # Check if GitHub release already exists
          if gh release view "$tag_name" &>/dev/null; then
            echo "Error: Release $tag_name already exists on GitHub"
            exit 1
          fi

          echo "Tag $tag_name is available"
          echo "should_proceed=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: validate
    runs-on: ${{ matrix.os }}

    permissions:
      id-token: write  # required for OIDC
      contents: write  # Required to create new releases with GITHUB_TOKEN

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Configure AWS creds via OIDC
        if: inputs.tag_prefix == 'v'  # Only configure AWS for production releases
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246367841364:role/GriptapeNodesDesktopGithubActions
          aws-region: us-west-2
          role-session-name: gha-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Import Mac certificates
        if: runner.os == 'macOS' && env.MAC_CERTS_P12 != ''
        env:
          MAC_CERTS_P12: ${{ secrets.MAC_CERTS_P12 }}
          MAC_CERTS_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$MAC_CERTS_P12" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$MAC_CERTS_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$MAC_CERTS_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MAC_CERTS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$MAC_CERTS_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build and Publish
        run: npm run publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAG_PREFIX: ${{ inputs.tag_prefix }}
          DRAFT: ${{ inputs.draft }}
          PRERELEASE: ${{ inputs.prerelease }}
